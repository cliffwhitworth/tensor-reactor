{"version":3,"sources":["redux/components/ActionList.js","redux/actions/index.js","redux/components/ActionDetails.js","redux/components/App.js","redux/reducers/index.js","redux/index.js","serviceWorker.js","index.js"],"names":["ActionList","this","props","actions","map","action","className","key","name","onClick","selectAction","renderActions","React","Component","connect","state","type","payload","selectedAction","example","App","style","marginTop","combineReducers","selectedActions","Index","store","createStore","reducers","Boolean","window","location","hostname","match","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAIMA,E,wLACe,IAAD,OACZ,OAAOC,KAAKC,MAAMC,QAAQC,KAAI,SAACC,GAC3B,OACI,yBAAKC,UAAU,OAAOC,IAAKF,EAAOG,MAC9B,yBAAKF,UAAU,yBACX,4BACIA,UAAU,oBACVG,QAAS,kBAAM,EAAKP,MAAMQ,aAAaL,KAF3C,WAKJ,yBAAKC,UAAU,WACVD,EAAOG,Y,+BAQxB,OACI,6BACI,4CACA,yBAAKF,UAAU,mBACTL,KAAKU,sB,GAxBFC,IAAMC,WAwChBC,eATS,SAACC,GACrB,MAAO,CAACZ,QAASY,EAAMZ,WAQa,CAAEO,aCvCd,SAAAL,GAExB,MAAO,CACHW,KAAM,YACNC,QAASZ,KDmCFS,CAA2Cd,GEzB3Cc,eAJS,SAAAC,GACpB,MAAO,CAAEV,OAAQU,EAAMG,kBAGZJ,EAhBO,SAAC,GAAgB,IAAdT,EAAa,EAAbA,OACrB,OAAKA,EAID,6BACI,6CACA,2BAAG,gCAASA,EAAOG,MAAnB,KAAoCH,EAAOc,UALxC,6BAAK,iDCiBLC,EAhBH,WACR,OACI,yBAAKd,UAAU,oBAAoBe,MAAO,CAACC,UAAW,SAClD,+CACA,yBAAKhB,UAAU,OACX,yBAAKA,UAAU,qBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,qBACX,kBAAC,EAAD,UCMLiB,cAAgB,CAC3BpB,QApBmB,WACnB,MAAO,CACH,CAAEK,KAAM,UAAWW,QAAS,0BAC5B,CAAEX,KAAM,UAAWW,QAAS,iCAC5B,CAAEX,KAAM,WAAYW,QAAS,qBAC7B,CAAEX,KAAM,WAAYW,QAAS,mCAgBjCD,eAZ0B,WAAmC,IAAlCM,EAAiC,uDAAjB,KAAMnB,EAAW,uCAC5D,OAAQA,EAAOW,MACX,IAAK,YACD,OAAOX,EAAOY,QAClB,QACI,OAAOO,MCHJC,EAJD,WACV,OAAO,kBAAC,IAAD,CAAUC,MAAOC,YAAYC,IAAW,kBAAC,EAAD,QCE/BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,UDuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea3cefc1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { selectAction } from '../actions';\r\n\r\nclass ActionList extends React.Component {\r\n    renderActions() {\r\n        return this.props.actions.map((action) => {\r\n            return (\r\n                <div className=\"item\" key={action.name}>\r\n                    <div className=\"right floated content\">\r\n                        <button \r\n                            className=\"ui button primary\"\r\n                            onClick={() => this.props.selectAction(action)}\r\n                        >Select</button>                        \r\n                    </div>\r\n                    <div className=\"content\">\r\n                        {action.name}\r\n                    </div>\r\n                </div>\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h3>Actions List</h3>\r\n                <div className=\"ui divided list\">\r\n                    { this.renderActions() }\r\n                </div>\r\n            </div>\r\n            )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => { // name is arbitrary\r\n    return {actions: state.actions}\r\n}\r\n\r\n// Provider -> App -> Connect -> Children that use store\r\n// export default connect(mapStateToProps, {\r\n//     selectAction: selectAction // calls dispatch via connect\r\n// })(ActionList);\r\n// OR\r\nexport default connect(mapStateToProps, { selectAction })(ActionList);","// Action Creator\r\n\r\n// named export\r\n// if named export use import { selectAction } from './actions';\r\n// if export default App use import App from './redux/App';\r\nexport const selectAction = action => {\r\n    // return Action\r\n    return {\r\n        type: \"AN_ACTION\", // required\r\n        payload: action\r\n    };\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst ActionDetails = ({ action }) => {\r\n    if (!action) {\r\n        return <div><h3>Action Detail</h3></div>\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>Action Detail</h3>\r\n            <p><strong>{action.name}</strong>: {action.example}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return { action: state.selectedAction }\r\n}\r\n\r\nexport default connect(mapStateToProps)(ActionDetails);","import React from 'react';\r\nimport ActionList from './ActionList';\r\nimport ActionDetails from './ActionDetails';\r\n\r\n// Provider -> App -> Connect -> Children that use store\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"ui container grid\" style={{marginTop: \"23px\"}}>\r\n            <h2>React Redux App</h2>\r\n            <div className=\"row\">\r\n                <div className=\"column eight wide\">\r\n                    <ActionList />\r\n                </div>\r\n                <div className=\"column eight wide\">\r\n                    <ActionDetails />\r\n                </div>\r\n            </div>            \r\n        </div>\r\n    )\r\n};\r\n\r\nexport default App;","import { combineReducers } from 'redux';\r\n\r\nconst actionsReducer = () => {\r\n    return [\r\n        { name: \"running\", example: \"Coco is running around\"},\r\n        { name: \"looking\", example: \"Cleo is looking for some love\"},\r\n        { name: \"sleeping\", example: \"Zimba is sleeping\"},\r\n        { name: \"watching\", example: \"Peaches is watching the birds\"}\r\n    ];\r\n}\r\n\r\nconst selectedActionReducer = (selectedActions=null, action) => {\r\n    switch (action.type) {\r\n        case \"AN_ACTION\":\r\n            return action.payload;\r\n        default:\r\n            return selectedActions;\r\n    }\r\n}\r\n\r\n// keys of this object show up in state\r\nexport default combineReducers({\r\n    actions: actionsReducer,\r\n    selectedAction: selectedActionReducer\r\n});","import React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nimport App from './components/App';\r\nimport reducers from './reducers';\r\n\r\n// Provider -> App -> Connect -> Children that use store\r\n\r\nconst Index = () => {\r\n    return <Provider store={createStore(reducers)}><App /></Provider>;\r\n}\r\n\r\nexport default Index;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import './index.css';\r\n// import App from './App';\r\n// import App from './functionalComponent/App';\r\n// import App from './classComponent/App';\r\n// import App from './unsplashAPI/App';\r\nimport App from './redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n\r\n// https://github.com/facebook/create-react-app/\r\n// https://developers.google.com/web/fundamentals/primers/service-workers\r\nserviceWorker.unregister();"],"sourceRoot":""}